
🚀 IQAutoJobs - Modern Job Platform 

A comprehensive job platform built with modern technologies, connecting talented professionals with top companies worldwide. 
✨ Technology Stack 
🎯 Frontend 

     ⚡ Next.js 15 - React framework with App Router
     📘 TypeScript 5 - Type-safe JavaScript
     🎨 Tailwind CSS 4 - Utility-first CSS framework
     🧩 shadcn/ui - High-quality, accessible components
     🎯 Lucide React - Beautiful icon library
     🔄 TanStack Query - Data synchronization
     🐻 Zustand - State management
     

🚀 Backend 

     ⚡ FastAPI - Modern, fast web framework
     🐍 Python 3.11 - Robust programming language
     🗄️ SQLAlchemy - SQL toolkit and ORM
     🐘 PostgreSQL - Powerful open source database
     🔐 JWT Authentication - Secure token-based auth
     ⚡ Redis - In-memory data structure store
     

🛠️ DevOps & Deployment 

     🐳 Docker - Containerization
     🚀 Railway - Cloud deployment platform
     ☁️ Cloudflare R2 - Object storage
     🔍 SEO Optimized - Sitemap, robots.txt, structured data
     

🎯 Features 
👥 User Management 

     Multi-role System: Candidates, Employers, and Administrators
     Secure Authentication: JWT-based with refresh tokens
     Profile Management: Complete user profiles with skills and experience
     Resume Upload: File storage with Cloudflare R2
     

🏢 Company Management 

     Company Profiles: Detailed company information and branding
     Job Posting: Create and manage job listings
     Application Management: Review and manage candidate applications
     Analytics Dashboard: Track job performance and applicant metrics
     

💼 Job Platform 

     Advanced Search: Search by title, location, category, and skills
     Job Filters: Comprehensive filtering options
     Application Tracking: Real-time application status updates
     Saved Jobs: Bookmark interesting opportunities
     

📊 Admin Panel 

     System Dashboard: Overview of platform statistics
     User Management: Manage all user accounts and roles
     Content Moderation: Monitor and manage platform content
     Audit Logs: Complete activity tracking and compliance
     

🚀 Quick Start 
Prerequisites 

     Node.js 18+
     Python 3.11+
     PostgreSQL 15+
     Redis 7+
     Docker (optional)
     

Development Setup 

     Clone the repository
     

bash
 
 
 
1
2
git clone https://github.com/your-username/iqautojobs.git
cd iqautojobs
 
 
 

     Set up the backend
     

bash
 
 
 
1
2
3
4
cd backend
python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate
pip install -r requirements.txt
 
 
 

     Set up the frontend
     

bash
 
 
 
1
2
cd ..
npm install
 
 
 

     Configure environment variables
     

bash
 
 
 
1
2
3
4
5
6
7
8
# Backend (.env)
DATABASE_URL=postgresql://username:password@localhost/iqautojobs
REDIS_URL=redis://localhost:6379
SECRET_KEY=your-secret-key-here
ENVIRONMENT=development

# Frontend (.env.local)
NEXT_PUBLIC_API_URL=http://localhost:8000
 
 
 

     Set up the database
     

bash
 
 
 
1
2
3
# Create database and run migrations
cd backend
python -c "from app.db.base import Base, engine; Base.metadata.create_all(engine)"
 
 
 

     Create sample data (optional)
     

bash
 
 
 
1
2
cd backend
python create_sample_data.py
 
 
 

     Start the development servers
     

bash
 
 
 
1
2
3
4
5
6
# Terminal 1 - Backend
cd backend
uvicorn main:app --reload --port 8000

# Terminal 2 - Frontend
npm run dev
 
 
 

     Open your browser
     

     Frontend: http://localhost:3000 
     Backend API: http://localhost:8000 
     API Docs: http://localhost:8000/docs 
     

Using Docker 

     Development with Docker Compose
     

bash
 
 
 
1
docker-compose up -d
 
 
 

     Production Build
     

bash
 
 
 
1
2
3
4
5
6
7
8
9
# Build frontend
npm run build

# Build backend
cd backend
docker build -t iqautojobs-backend .

# Run with Docker Compose
docker-compose -f docker-compose.prod.yml up -d
 
 
 
📁 Project Structure 
 
 
 
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
iqautojobs/
├── backend/                    # FastAPI backend
│   ├── app/
│   │   ├── api/               # API routes
│   │   ├── core/              # Core configuration
│   │   ├── db/                # Database models
│   │   ├── domain/            # Pydantic schemas
│   │   ├── repositories/      # Data access layer
│   │   └── services/          # Business logic
│   ├── main.py               # Application entry point
│   ├── requirements.txt      # Python dependencies
│   └── Dockerfile            # Backend container
├── src/                      # Next.js frontend
│   ├── app/                  # App Router pages
│   ├── components/           # React components
│   ├── hooks/                # Custom hooks
│   └── lib/                  # Utilities
├── docker-compose.yml        # Development environment
├── Dockerfile               # Frontend container
└── README.md               # This file
 
 
 
🌟 Key Components 
🔐 Authentication System 

     JWT-based authentication with refresh tokens
     Role-based access control (Candidate, Employer, Admin)
     Secure password hashing
     Session management
     

📊 Repository Pattern 

     Clean separation of concerns
     Testable data access layer
     Consistent error handling
     Transaction management
     

🎨 UI Components 

     Modern, responsive design
     Accessible components with ARIA support
     Dark/light theme support
     Mobile-first approach
     

🔄 API Design 

     RESTful API endpoints
     Comprehensive error handling
     Request validation with Pydantic
     Rate limiting and security
     

🚀 Deployment 
Railway Deployment 

     Deploy Backend
     

bash
 
 
 
1
2
3
4
5
6
7
# Connect to Railway
railway login
railway init

# Deploy backend
cd backend
railway up
 
 
 

     Deploy Frontend
     

bash
 
 
 
1
2
# Deploy frontend
railway up
 
 
 

     Configure Environment Variables
     

     Set up database connection
     Configure Redis connection
     Add secret keys and API URLs
     

Manual Deployment 

     Build Frontend
     

bash
 
 
 
1
npm run build
 
 
 

     Deploy Backend
     

bash
 
 
 
1
2
cd backend
gunicorn main:app -w 4 -k uvicorn.workers.UvicornWorker
 
 
 

     Configure Reverse Proxy
     

nginx
 
 
 
1
2
3
4
5
6
7
8
9
10
11
12
server {
    listen 80;
    server_name your-domain.com;

    location / {
        proxy_pass http://localhost:3000;
    }

    location /api {
        proxy_pass http://localhost:8000;
    }
}
 
 
 
🔧 Configuration 
Environment Variables 
Backend (.env) 
env
 
 
 
1
2
3
4
5
6
7
8
9
10
11
DATABASE_URL=postgresql://username:password@localhost/iqautojobs
REDIS_URL=redis://localhost:6379
SECRET_KEY=your-secret-key-here
ENVIRONMENT=development
CORS_ORIGINS=http://localhost:3000

# Cloudflare R2 (optional)
CLOUDFLARE_R2_ACCESS_KEY_ID=your-access-key
CLOUDFLARE_R2_SECRET_ACCESS_KEY=your-secret-key
CLOUDFLARE_R2_BUCKET_NAME=your-bucket-name
CLOUDFLARE_R2_ACCOUNT_ID=your-account-id
 
 
 
Frontend (.env.local) 
env
 
 
 
1
2
NEXT_PUBLIC_API_URL=http://localhost:8000
NEXT_PUBLIC_APP_URL=http://localhost:3000
 
 
 
📊 Monitoring & Analytics 
Application Monitoring 

     Error tracking with Sentry (optional)
     Performance monitoring
     User activity analytics
     System health checks
     

Database Monitoring 

     Query performance tracking
     Connection pool monitoring
     Backup and recovery procedures
     

🔒 Security Features 

     Authentication: JWT with refresh tokens
     Authorization: Role-based access control
     Input Validation: Comprehensive data validation
     Rate Limiting: API endpoint protection
     CORS: Cross-origin resource sharing
     Security Headers: HTTP security headers
     Data Encryption: Sensitive data protection
     